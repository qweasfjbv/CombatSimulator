//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/InputActions/InputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Defense.InputActions
{
    public partial class @PlayerControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAction"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""2b1c8cf7-e7e5-4ed3-b6e0-2fc7accb97ba"",
            ""actions"": [
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""959f9675-d35d-440b-9e06-030f0a073f88"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""56f3ab46-19c9-4718-82bb-32f6d29a6b7c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""c097441b-6add-4757-b8a4-68718f36eec1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""287a1878-09a6-4d23-a937-9019c7c4e69f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Init"",
                    ""type"": ""Button"",
                    ""id"": ""718bb48e-5695-40c5-91cc-eae3ea46166d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25a17c91-54c4-4fa5-be9b-194df823db87"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3520b8e-62a4-449e-ab24-b70cb5c27de2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62646d15-e33e-4149-ad2d-67a473354355"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""650eee68-dbc0-4245-b118-0d8549930631"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02e7bb67-3b21-4f24-bb41-6bf646294491"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Init"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map1"",
            ""id"": ""9b4e9571-228c-4244-bc9a-358dccc6f3a8"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""01d80ecc-dc5d-4c8b-81d8-5112e5447794"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9f11161-3d3b-4099-9e1f-281cc2c70b2d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_MouseMove = m_Camera.FindAction("MouseMove", throwIfNotFound: true);
            m_Camera_LeftClick = m_Camera.FindAction("LeftClick", throwIfNotFound: true);
            m_Camera_RightClick = m_Camera.FindAction("RightClick", throwIfNotFound: true);
            m_Camera_Scroll = m_Camera.FindAction("Scroll", throwIfNotFound: true);
            m_Camera_Init = m_Camera.FindAction("Init", throwIfNotFound: true);
            // New action map1
            m_Newactionmap1 = asset.FindActionMap("New action map1", throwIfNotFound: true);
            m_Newactionmap1_Newaction = m_Newactionmap1.FindAction("New action", throwIfNotFound: true);
        }

        ~@PlayerControl()
        {
            UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, PlayerControl.Camera.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Newactionmap1.enabled, "This will cause a leak and performance issues, PlayerControl.Newactionmap1.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Camera
        private readonly InputActionMap m_Camera;
        private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
        private readonly InputAction m_Camera_MouseMove;
        private readonly InputAction m_Camera_LeftClick;
        private readonly InputAction m_Camera_RightClick;
        private readonly InputAction m_Camera_Scroll;
        private readonly InputAction m_Camera_Init;
        public struct CameraActions
        {
            private @PlayerControl m_Wrapper;
            public CameraActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @MouseMove => m_Wrapper.m_Camera_MouseMove;
            public InputAction @LeftClick => m_Wrapper.m_Camera_LeftClick;
            public InputAction @RightClick => m_Wrapper.m_Camera_RightClick;
            public InputAction @Scroll => m_Wrapper.m_Camera_Scroll;
            public InputAction @Init => m_Wrapper.m_Camera_Init;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void AddCallbacks(ICameraActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @Init.started += instance.OnInit;
                @Init.performed += instance.OnInit;
                @Init.canceled += instance.OnInit;
            }

            private void UnregisterCallbacks(ICameraActions instance)
            {
                @MouseMove.started -= instance.OnMouseMove;
                @MouseMove.performed -= instance.OnMouseMove;
                @MouseMove.canceled -= instance.OnMouseMove;
                @LeftClick.started -= instance.OnLeftClick;
                @LeftClick.performed -= instance.OnLeftClick;
                @LeftClick.canceled -= instance.OnLeftClick;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
                @Init.started -= instance.OnInit;
                @Init.performed -= instance.OnInit;
                @Init.canceled -= instance.OnInit;
            }

            public void RemoveCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraActions @Camera => new CameraActions(this);

        // New action map1
        private readonly InputActionMap m_Newactionmap1;
        private List<INewactionmap1Actions> m_Newactionmap1ActionsCallbackInterfaces = new List<INewactionmap1Actions>();
        private readonly InputAction m_Newactionmap1_Newaction;
        public struct Newactionmap1Actions
        {
            private @PlayerControl m_Wrapper;
            public Newactionmap1Actions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Newactionmap1_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Newactionmap1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Newactionmap1Actions set) { return set.Get(); }
            public void AddCallbacks(INewactionmap1Actions instance)
            {
                if (instance == null || m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(INewactionmap1Actions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(INewactionmap1Actions instance)
            {
                if (m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(INewactionmap1Actions instance)
            {
                foreach (var item in m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Newactionmap1ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Newactionmap1Actions @Newactionmap1 => new Newactionmap1Actions(this);
        public interface ICameraActions
        {
            void OnMouseMove(InputAction.CallbackContext context);
            void OnLeftClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnInit(InputAction.CallbackContext context);
        }
        public interface INewactionmap1Actions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
